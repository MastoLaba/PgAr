package deathstar.consegna4;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.InputMismatchException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

/**
 * Classe che gestisce l'interfaccia utente del programma.
 * 
 * @author Michele Dusi
 */
public class Main {
	
	// Menu - Formattazione
	private static final String MENU_VOCE = "%d) %s;";
	private static final String MENU_ESCI = "0) Esci.";
	private static final String MENU_SALVA = "0) Salva ed esci.";
	private static final String MENU_INDIETRO = "0) Indietro.";
	private static final char [] CORNICE_CHAR = {'~', '+', '#'};
	private static int CORNICE_ASPETTO = 0;
	private static final int MENU_ESCI_VALUE = 0;
	
	// Inserimenti - Formattazione
	private static final int INS_NULL_VALUE = -1;
	private static final String CURSOR = "-> ";
	
	// Menu Principale Clinica
	private static final String PRINCIPALE_TITOLO = "Menu Principale";
	private static final String [] PRINCIPALE_VOCI = {
			"Area Pazienti", 
			"Area Medici", 
			"Visualizzazione appuntamenti",
			"Impostazioni"};
	private static final String MAIN_USCITA = "Sto uscendo dal programma...";
	private static final String PROGRAMMA_TERMINATO = "Programma terminato.";

	// Menu Area Pazienti
	private static final String AREA_PAZIENTI_TITOLO = "Area Pazienti";
	private static final String [] AREA_PAZIENTI_VOCI = {
			"Cerca un paziente",
			"Visualizza tutti i pazienti",
			"Aggiungi un nuovo paziente",
			"Rimuovi un paziente esistente"};
	
	// Menu Ricerca Pazienti
	private static final String RICERCA_PAZIENTI_TITOLO = "Ricerca Pazienti";
	private static final String [] RICERCA_PAZIENTI_VOCI = {
			"Cerca un paziente per nome",
			"Cerca un paziente per ID",};

	// Menu Gestione Paziente
	private static final String GESTIONE_PAZIENTE_TITOLO = "Gestione Paziente";
	private static final String [] GESTIONE_PAZIENTE_VOCI = {
			"Visualizza gli appuntamenti",
			"Prenota un appuntamento",
			"Annulla un appuntamento",
			"Modifica i dati personali"};
	
	// Menu Modifica Dati Paziente
	private static final String MODIFICA_DATI_PAZIENTE_TITOLO = "Modifica Dati Paziente "; 
	private static final String [] MODIFICA_DATI_PAZIENTE_VOCI = {
			"Nome:      ",
			"Cognome:   ",
			"Codice:    ",};
	
	// Menu Selezione Codice Urgenza
	private static final String SELEZIONE_CODICE_URGENZA_TITOLO = "Selezione Codice d'Urgenza";
	private static final String [] SELEZIONE_CODICE_URGENZA_VOCI = {
			"Codice ROSSO",
			"Codice GIALLO",
			"Codice NERO",
			"Codice MARRONE"};
	
	// Menu Visualizzazione Pazienti
	private static final String VISUALIZZA_PAZIENTI_TITOLO = "Visualizza Elenco Pazienti";
	private static final String [] VISUALIZZA_PAZIENTI_VOCI = {
			"Visualizza l'elenco completo",
			"Visualizza solo i pazienti con un appuntamento"};

	// Menu Area Medici
	private static final String AREA_MEDICI_TITOLO = "Area Medici";
	private static final String [] AREA_MEDICI_VOCI = {
			"Cerca un medico",
			"Visualizza tutti i medici",
			"Aggiungi un nuovo medico",
			"Rimuovi un medico esistente"};
	
	// Menu Ricerca Medici
	private static final String RICERCA_MEDICI_TITOLO = "Ricerca Medici";
	private static final String [] RICERCA_MEDICI_VOCI = {
			"Cerca un medico per nome",
			"Cerca un medico per ID",};
	
	// Menu Gestione Medico
	private static final String GESTIONE_MEDICO_TITOLO = "Gestione Medico";
	private static final String [] GESTIONE_MEDICO_VOCI = {
			"Visualizza appuntamenti",
			"Verifica la disponibilità oraria",
			"Visualizza gli orari di lavoro",
			"Modifica gli orari di lavoro",
			"Modifica i dati personali"};
	
	// Menu Gestione Orari Medico
	private static final String GESTIONE_ORARI_TITOLO = "Gestione Orari";
	private static final String [] GESTIONE_ORARI_VOCI = {
			"Aggiungi un orario lavorativo",
			"Rimuovi un orario lavorativo",
			"Libera un giorno lavorativo",
			"Visualizza l'orario"};
	
	// Menu Modifica Dati Medico
	private static final String MODIFICA_DATI_MEDICO_TITOLO = "Modifica Dati Medico "; 
	private static final String [] MODIFICA_DATI_MEDICO_VOCI = {
			"Nome:             ",
			"Cognome:          ",
			"Anno Laurea:      ",
			"Anno Assunzione:  ",};
	
	// Menu Visualizzazione Appuntamenti
	private static final String VISUALIZZA_APPUNTAMENTI_TITOLO = "Visualizzazione Appuntamenti";
	private static final String [] VISUALIZZA_APPUNTAMENTI_VOCI = {
			"Visualizza gli appuntamenti di oggi",
			"Visualizza gli appuntamenti fino a una certa data",
			"Visualizza gli appuntamenti di una data specifica"};

	// Menu Impostazioni
	private static final String IMPOSTAZIONI_TITOLO = "Impostazioni";
	private static final String [] IMPOSTAZIONI_VOCI = {
			"Informazioni sulla Clinica",
			"Modifica aspetto dei menu"};
	
	// Menu Modifica Aspetto Menu
	private static final String MODIFICA_ASPETTO_TITOLO = "Modifica Aspetto Menu";
	private static final String [] MODIFICA_ASPETTO_VOCI = {
			"Aspetto [1]",
			"Aspetto [2]",
			"Aspetto [3]"};
	
	// Informazioni Clinica
	private static final String INFO_NOME = "Clinica \"La Morte Nera\"";
	private static final String INFO_VERSIONE = "Version 0.9";
	private static final String INFO_AUTORI = "Author: Michele Dusi, Lorenzo Nodari";
	private static final int PAUSA = 5;
	
	// Errori
	private static final String ERRORE_INSERIMENTO_NUMERICO = "Errore: inserire un valore numerico per selezionare l'opzione desiderata.";
	private static final String ERRORE_PAZIENTE_NON_TROVATO = "Non è stato trovato alcun paziente corrispondente.";
	private static final String ERRORE_MEDICO_NON_TROVATO = "Non è stato trovato alcun medico corrispondente.";
	private static final String ERRORE_LISTA_APPUNTAMENTI_VUOTA = "Non sono presenti appuntamenti.";
	
	// Inserimento Data
	private static final String INSERIMENTO_DATA_ANNO = "Inserisci l'anno:";
	private static final String INSERIMENTO_DATA_MESE = "Inserisci il mese:";
	private static final String INSERIMENTO_DATA_GIORNO = "Inserisci il giorno:";
	private static final int MIN_ANNO_POSSIBILE = 1800;
	private static final int MAX_ANNO_POSSIBILE = 2100;
	private static final int MIN_MESE_POSSIBILE = 0;
	private static final int MAX_MESE_POSSIBILE = 11;
	private static final int MIN_GIORNO_POSSIBILE = 1;
	private static final int MAX_GIORNO_POSSIBILE = 31;
	
	// Inserimento Stringhe
	private static final String MODIFICA_DATI_INSERISCI_NOME = "Inserisci il nuovo nome:";
	private static final String MODIFICA_DATI_INSERISCI_COGNOME = "Inserisci il nuovo cognome:";
	private static final String MODIFICA_DATI_INSERISCI_ANNO_LAUREA = "Inserisci l'anno di laurea:";
	private static final String MODIFICA_DATI_INSERISCI_ANNO_ASSUNZIONE = "Inserisci l'anno di assunzione:";
	
	// Scanner
	private static Scanner reader;
	
	// Clinica
	private static Clinica clinica;
	
	/**
	 * Classe MAIN, visualizza il menu principale.
	 */
	public static void main (String [] args) {
		// Inizializzo lo scanner
		reader = new Scanner(System.in);
		// Inizializzo la clinica
		clinica = new Clinica();
		// Menu Principale
		menuPrincipale();
		System.out.println(PROGRAMMA_TERMINATO);
	}
	
	public static void menuPrincipale() {
		int scelta;
		do {
			scelta = scegliDaMenu(PRINCIPALE_TITOLO, PRINCIPALE_VOCI, MENU_ESCI);
			switch(scelta) {
			case 1:
				// Menu pazienti
				menuAreaPazienti();
				break;
			case 2:
				// Menu medici
				menuAreaMedici();
				break;
			case 3:
				// Visualizzazione appuntamenti
				menuVisualizzaAppuntamenti();
				break;
			case 4:
				// Impostazioni
				menuImpostazioniProgramma();
				break;
			case 0:
				// Uscita
				System.out.println(MAIN_USCITA);
			}
		} while (scelta != MENU_ESCI_VALUE);
	}

	public static void menuAreaPazienti() {
		int scelta;
		do {
			scelta = scegliDaMenu(AREA_PAZIENTI_TITOLO, AREA_PAZIENTI_VOCI);
			switch(scelta) {
			case 1:
				// Ricerca paziente
				try {
					Paziente paziente = menuRicercaPaziente();
					menuGestionePaziente(paziente);
				}
				catch (NoSuchElementException e) {
					System.out.println(ERRORE_PAZIENTE_NON_TROVATO);
				}
				break;
			case 2:
				// Visualizzazione pazienti
				menuVisualizzaPazienti();
				break;
			case 3:
				// Aggiunta pazienti
				break;
			case 4:
				// Rimozione pazienti
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static Paziente menuRicercaPaziente() {
		// Questo menu è leggermente diverso, non deve essere ripetuto ma vive solo in funzione di "Area Pazienti -> Ricerca Paziente"
		int scelta = scegliDaMenu(RICERCA_PAZIENTI_TITOLO, RICERCA_PAZIENTI_VOCI);
		switch(scelta) {
		case 1:
			// Ricerca paziente per nome
			return ricercaPazientePerNome();
		case 2:
			// Ricerca paziente per ID
			return ricercaPazientePerId();
		default:
			// Annullamento ricerca
			throw new NoSuchElementException();
		}
	}
	
	public static void menuGestionePaziente(Paziente paziente) {
		int scelta;
		do {
			scelta = scegliDaMenu(GESTIONE_PAZIENTE_TITOLO, GESTIONE_PAZIENTE_VOCI);
			switch(scelta) {
			case 1:
				// Visualizza appuntamenti
				break;
			case 2:
				// Prenota appuntamento
				break;
			case 3:
				// Annulla appuntamento
				break;
			case 4:
				// Modifica dati paziente
				menuModificaDatiPaziente(paziente);
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static void menuModificaDatiPaziente(Paziente paziente) {
		// Creazione delle opzioni menu personalizzate:
		int scelta;
		do {
			String [] voci_personalizzate = {
					MODIFICA_DATI_PAZIENTE_VOCI[0] + paziente.getNome(),
					MODIFICA_DATI_PAZIENTE_VOCI[1] + paziente.getCognome(),
					MODIFICA_DATI_PAZIENTE_VOCI[2] + paziente.getCondizione()};
			scelta = scegliDaMenu(MODIFICA_DATI_PAZIENTE_TITOLO + paziente.getId(), voci_personalizzate, MENU_SALVA);
			switch(scelta) {
			case 1:
				// Modifica Nome
				System.out.println(MODIFICA_DATI_INSERISCI_NOME);
				paziente.setNome(InputDati.leggiStringaNonVuota());
				break;
			case 2:
				// Modifica Cognome
				System.out.println(MODIFICA_DATI_INSERISCI_COGNOME);
				paziente.setCognome(InputDati.leggiStringaNonVuota());
				break;
			case 3:
				// Modifica condizione
				paziente.setCondizione(menuSelezioneCodiceUrgenza(paziente.getCondizione()));
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static int menuSelezioneCodiceUrgenza(int codice_default) {
		int scelta = scegliDaMenu(SELEZIONE_CODICE_URGENZA_TITOLO, SELEZIONE_CODICE_URGENZA_VOCI);
		switch(scelta) {
		case 1:
			// Codice ROSSO
			return Paziente.CODICE_ROSSO;
		case 2:
			// Codice GIALLO
			return Paziente.CODICE_GIALLO;
		case 3:
			// Codice NERO
			return Paziente.CODICE_NERO;
		case 4:
			// Codice MARRONE
			return Paziente.CODICE_MARRONE;
		default:
			return codice_default; // Questo valore verrà ritornato solo in caso si esca dal menu
			// E' un modo per evitare di perdere il valore precedente di Urgenza in caso l'utente sbagli a selezionare il menu
		}
	}
	
	public static void menuVisualizzaPazienti() {
		int scelta;
		do {
			scelta = scegliDaMenu(VISUALIZZA_PAZIENTI_TITOLO, VISUALIZZA_PAZIENTI_VOCI);
			switch(scelta) {
			case 1:
				// Visualizza tutti
				System.out.println(clinica.stampaPazienti());
				break;
			case 2:
				// Visualizza pazienti con appuntamenti
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static void menuAreaMedici() {
		int scelta;
		do {
			scelta = scegliDaMenu(AREA_MEDICI_TITOLO, AREA_MEDICI_VOCI);
			switch(scelta) {
			case 1:
				// Ricerca medico
				try {
					Medico medico = menuRicercaMedico();
					menuGestioneMedico(medico);
				}
				catch (NoSuchElementException e) {
					System.out.println(ERRORE_MEDICO_NON_TROVATO);
				}
				break;
			case 2:
				// Visualizzazione medici
				System.out.println(clinica.stampaMedici());
				break;
			case 3:
				// Aggiunta medico
				break;
			case 4:
				// Rimozione medico
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static Medico menuRicercaMedico() {
		// Questo menu è leggermente diverso, non deve essere ripetuto ma vive solo in funzione di "Area Medici -> Ricerca Medico"
		int scelta = scegliDaMenu(RICERCA_MEDICI_TITOLO, RICERCA_MEDICI_VOCI);
		switch(scelta) {
		case 1:
			// Ricerca medico per nome
			return ricercaMedicoPerNome();
		case 2:
			// Ricerca paziente per ID
			return ricercaMedicoPerId();
		default:
			// Annullamento ricerca
			throw new NoSuchElementException();
		}
	}
	
	public static void menuGestioneMedico(Medico medico) {
		int scelta;
		do {
			scelta = scegliDaMenu(GESTIONE_MEDICO_TITOLO, GESTIONE_MEDICO_VOCI);
			switch(scelta) {
			case 1:
				// Visualizza appuntamenti
				break;
			case 2:
				// Verifica disponibilità oraria
				break;
			case 3:
				// Visualizza orari
				break;
			case 4:
				// Gestisci orari
				menuGestioneOrari(medico.getOrario());
				break;
			case 5:
				// Modifica dati medico
				menuModificaDatiMedico(medico);
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static void menuGestioneOrari(OrarioLavorativo orario) {
		int scelta;
		do {
			scelta = scegliDaMenu(GESTIONE_ORARI_TITOLO, GESTIONE_ORARI_VOCI);
			switch(scelta) {
			case 1:
				// Aggiungi Orario lavorativo
				break;
			case 2:
				// Rimuovi Orario Lavorativo
				break;
			case 3:
				// Libera giorno lavorativo
				break;
			case 4:
				// Visualizza orari
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static void menuModificaDatiMedico(Medico medico) {
		// Creazione delle opzioni menu personalizzate:
		int scelta;
		do {
			String [] voci_personalizzate = {
					MODIFICA_DATI_MEDICO_VOCI[0] + medico.getNome(),
					MODIFICA_DATI_MEDICO_VOCI[1] + medico.getCognome(),
					MODIFICA_DATI_MEDICO_VOCI[2] + Integer.toString(medico.getAnnoLaurea()),
					MODIFICA_DATI_MEDICO_VOCI[3] + Integer.toString(medico.getAnnoAssunzione())};
			scelta = scegliDaMenu(MODIFICA_DATI_MEDICO_TITOLO + medico.getId(), voci_personalizzate, MENU_SALVA);
			switch(scelta) {
			case 1:
				// Modifica Nome
				System.out.println(MODIFICA_DATI_INSERISCI_NOME);
				medico.setNome(InputDati.leggiStringaNonVuota());
				break;
			case 2:
				// Modifica Cognome
				System.out.println(MODIFICA_DATI_INSERISCI_COGNOME);
				medico.setCognome(InputDati.leggiStringaNonVuota());
				break;
			case 3:
				// Modifica Anno laurea
				System.out.println(MODIFICA_DATI_INSERISCI_ANNO_LAUREA);
				medico.setAnnoLaurea(InputDati.leggiInteroFra(MIN_ANNO_POSSIBILE, MAX_ANNO_POSSIBILE));
				break;
			case 4:
				// Modifica Anno assunzione
				System.out.println(MODIFICA_DATI_INSERISCI_ANNO_ASSUNZIONE);
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}

	public static void menuVisualizzaAppuntamenti() {
		int scelta;
		List<Appuntamento> lista_appuntamenti;
		do {
			scelta = scegliDaMenu(VISUALIZZA_APPUNTAMENTI_TITOLO, VISUALIZZA_APPUNTAMENTI_VOCI);
			switch(scelta) {
			case 1:
				// Visualizza Appuntamenti di oggi (?)
				GregorianCalendar data_odierna = new GregorianCalendar();
				lista_appuntamenti = clinica.stampaAppuntamenti(data_odierna, data_odierna);
				break;
			case 2:
				// Visualizza Appuntamenti fino ad una certa data
				GregorianCalendar data_fissata = inserisciData();
				lista_appuntamenti = clinica.stampaAppuntamenti(new GregorianCalendar(), data_fissata);
				break;
			case 3:
				// Visualizza Appuntamenti in una certa data
				GregorianCalendar data_richiesta = inserisciData();
				lista_appuntamenti = clinica.stampaAppuntamenti(data_richiesta, data_richiesta);
				break;
			}
			if (scelta != MENU_ESCI_VALUE) {
				stampaAVideoAppuntamenti(lista_appuntamenti);
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	public static void menuImpostazioniProgramma() {
		int scelta;
		do {
			scelta = scegliDaMenu(IMPOSTAZIONI_TITOLO, IMPOSTAZIONI_VOCI);
			switch(scelta) {
			case 1:
				// Informazioni Clinica
				stampaInfoClinica();
				break;
			case 2:
				// Modifica Aspetto
				menuModificaAspetto();
				break;
			}
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	
	public static void menuModificaAspetto() {
		int scelta;
		do {
			scelta = scegliDaMenu(MODIFICA_ASPETTO_TITOLO, MODIFICA_ASPETTO_VOCI, MENU_SALVA);
			if (scelta != MENU_ESCI_VALUE)
				CORNICE_ASPETTO = scelta - 1;
		} while (scelta != MENU_ESCI_VALUE);
	}
	
	// Metodi di utilità (ricerca e inserimento dati)

	public static Paziente ricercaPazientePerNome() throws NoSuchElementException {
		// TODO Ricerca del paziente per nome
		if (false) // Se il paziente non si trova
			throw new NoSuchElementException();
		else
			return null;
	}
	
	public static Paziente ricercaPazientePerId() throws NoSuchElementException {
		// TODO Ricerca del paziente per Id
		if (false) // Se il paziente non si trova
			throw new NoSuchElementException();
		else
			return null;
	}

	public static Medico ricercaMedicoPerNome() throws NoSuchElementException {
		// TODO Ricerca del medico per nome
		if (false) // Se il medico non si trova
			throw new NoSuchElementException();
		else
			return null;
	}
	
	public static Medico ricercaMedicoPerId() throws NoSuchElementException {
		// TODO Ricerca del medico per Id
		if (false) // Se il medico non si trova
			throw new NoSuchElementException();
		else
			return null;
	}
	
	public static GregorianCalendar inserisciData() {
		// TODO verificare se GregCal fa i controlli in automatico sul numero di giorni o se sono da implementare
		System.out.println(INSERIMENTO_DATA_ANNO);
		int anno = InputDati.leggiInteroFra(MIN_ANNO_POSSIBILE, MAX_ANNO_POSSIBILE);
		System.out.println(INSERIMENTO_DATA_MESE);
		int mese = InputDati.leggiInteroFra(MIN_MESE_POSSIBILE, MAX_MESE_POSSIBILE);
		System.out.println(INSERIMENTO_DATA_GIORNO);
		int giorno = InputDati.leggiInteroFra(MIN_GIORNO_POSSIBILE, MAX_GIORNO_POSSIBILE);
		return new GregorianCalendar(anno, mese - 1, giorno);
	}
	
	// Metodi per la visualizzazione su console dei dati
	
	public static void stampaAVideoAppuntamenti(List<Appuntamento> lista) {
		if (lista.size() > 0)
			for (Appuntamento appuntamento : lista) {
				System.out.println(appuntamento.toString());
				// TODO toString per classe Appuntamento
			}
		else
			System.out.println(ERRORE_LISTA_APPUNTAMENTI_VUOTA);
	}
	
	public static void stampaInfoClinica() {
		// ROBE
		System.out.println(INFO_NOME);
		System.out.println(INFO_VERSIONE);
		System.out.println(INFO_AUTORI);
		try {
			TimeUnit.SECONDS.sleep(PAUSA);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	// Metodi per la visualizzazione dei menu
	
	/**
	 * Visualizza un menu formato da una serie di opzioni passate come parametri.
	 * Restituisce il numero corrispondente all'opzione scelta.
	 * 
	 * @return Opzione scelta.
	 */
	private static int scegliDaMenu(String titolo, String [] voci) {
		return scegliDaMenu(titolo, voci, MENU_INDIETRO); // OPZIONE DI DEFAULT
	}
	
	private static int scegliDaMenu(String titolo, String [] voci, String uscita) {
		System.out.println();
		// Visualizzazione titolo del menu
		stampaCornice(titolo.length());
		System.out.println(titolo);
		stampaCornice(titolo.length());
		// Visualizzazione voci del menu
		for (int i = 0; i < voci.length; i++)
			System.out.println(String.format(MENU_VOCE, i + 1, voci[i]));
		System.out.println(uscita);
		stampaCornice(titolo.length());
		
		// Inserimento scelta
		return InputDati.leggiInteroFra(MENU_ESCI_VALUE, voci.length);
	}
	
	private static void stampaCornice(int n) {
		for (int i = 0; i < n; i++)
			System.out.print(CORNICE_CHAR[CORNICE_ASPETTO]);
		System.out.println();
	}
	
	private static class InputDati {
		
		public static int leggiIntero() {
			int input = INS_NULL_VALUE;
			boolean intero_trovato = false;
			do {
				System.out.print(CURSOR);
				try {
					input = reader.nextInt();
					intero_trovato = true;
				} catch (InputMismatchException e) {
					System.out.println(ERRORE_INSERIMENTO_NUMERICO);
					reader.next();
				}
			} while (!intero_trovato);
			return input;
		}
		
		public static int leggiInteroFra(int minimo, int massimo) {
			int input = INS_NULL_VALUE;
			do {
				input = InputDati.leggiIntero();
			} while (input < minimo || input > massimo);
			return input;
		}
		
		public static String leggiStringaNonVuota() {
			String input;
			do {
				System.out.println(CURSOR);
				input = reader.nextLine();
			} while (input.trim().length() <= 0);
			return input.trim();
		}
			
	};
	
}
