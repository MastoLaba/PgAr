package deathstar.consegna4;

import java.time.DayOfWeek;
import java.util.ArrayList;

/**
 * Classe per la gestione della tabella di orari di un Medico.
 * 
 * @author Michele Dusi
 */
public class OrarioLavorativo {
	
	// Stringhe
	private static final String WHITESPACE = "  ";
	private static final String DAY_FORMAT = "\n%-13s";
	
	private static final int DAYS_PER_WEEK = 7;
	private ArrayList<ArrayList<Intervallo>> giorni;
	
	/**
	 * Costruttore vuoto.
	 * Inizializza gli orari vuoti.
	 */
	public OrarioLavorativo() {
		this.giorni = new ArrayList<ArrayList<Intervallo>>(DAYS_PER_WEEK);
		for (int i = 0; i < DAYS_PER_WEEK; i++) {
			giorni.add(new ArrayList<Intervallo>());
		}
	}
	
	/**
	 * Dato un giorno della settimana e un intervallo, controlla che questo non si sovrapponga con
	 * gli intervalli già presenti.
	 * 
	 * @param Giorno della settimana.
	 * @param Intervallo da controllare
	 * @return FALSE se ci sono sovrapposizioni.
	 */
	public boolean verificaDisponibilitaIntervallo(DayOfWeek dow, Intervallo intervallo_da_controllare) {
		for (Intervallo orario : giorni.get(dow.ordinal())) {
			if (orario.controllaSovrapposizione(intervallo_da_controllare))
				return false;
		}
		return true;
	}
	
	/**
	 * Forza l'unione del nuovo intervallo alla tabella di orari.
	 * Questo metodo è pensato per essere utilizzato in risposta ad un'eventuale sovrapposizione di orari,
	 * in caso l'utente voglia forzare l'aggiunta di questo ai precedenti.
	 */
	public void unisciIntervallo(DayOfWeek dow, Intervallo nuovo_intervallo) {
		ArrayList<Intervallo> giorno = giorni.get(dow.ordinal());
		// Scorro tutti gli intervalli di lavoro del giorno in questione
		for (int i = giorno.size() - 1; i >= 0; i--) {
			Intervallo orario = giorno.get(i);
			if (orario.controllaSovrapposizione(nuovo_intervallo)) {
				// Il nuovo intervallo "ingloba" tutti gli intervalli con cui si sovrappone
				nuovo_intervallo.unisci(orario);
				// I vecchi intervalli ora sono contenuti nel nuovo, e possono essere eliminati
				giorno.remove(i);
			}
		}
		giorno.add(nuovo_intervallo);
		giorno.sort(Intervallo.COMPARATOR);
	}

	/**
	 * Rimuove un intero intervallo all'interno degli orari.
	 * 
	 * @param Giorno della settimana
	 * @param Intervallo da liberare
	 */
	public void liberaIntervallo(DayOfWeek dow, Intervallo da_liberare) {
		ArrayList<Intervallo> giorno = giorni.get(dow.ordinal());
		for (Intervallo orario : giorno) {
			if (orario.controllaSovrapposizione(da_liberare))
				giorno.add(orario.sottrai(da_liberare));
		}
		giorno.sort(Intervallo.COMPARATOR);
		for (int i = giorno.size() - 1; i >= 0; i--) {
			Intervallo orario = giorno.get(i);
			if (orario.isInvalido()) {
				giorno.remove(orario);
			}
		}
	}
	
	/**
	 * Rimuove un preciso intervallo di lavoro dato il suo indice.
	 * 
	 * @param Giorno della settimana
	 * @param Indice da liberare
	 */
	public void rimuoviIntervallo(DayOfWeek dow, int indice_da_liberare) {
		ArrayList<Intervallo> giorno = giorni.get(dow.ordinal());
		giorno.remove(indice_da_liberare);
	}
	
	/**
	 * Rimuove tutti gli orari di uno specifico giorno della settimana.
	 * @param Giorno della settimana
	 */
	public void liberaGiorno(DayOfWeek dow) {
		giorni.get(dow.ordinal()).clear();
	}
	
	public String toString() {
		StringBuffer s = new StringBuffer();
		for (int i = 0; i < DAYS_PER_WEEK; i++) {
			s.append(String.format(DAY_FORMAT, DayOfWeek.of(i + 1)));
			for (Intervallo intervallo : giorni.get(i)) {
				s.append(WHITESPACE + intervallo.toString());
			}
		}
		return s.toString();
	}
	
	public static void main(String [] args) {
		OrarioLavorativo orario = new OrarioLavorativo();
		Intervallo int1 = new Intervallo(800, 1200);
		Intervallo int2 = new Intervallo(1330, 1530);
		Intervallo int3 = new Intervallo(1730, 2000);
		orario.unisciIntervallo(DayOfWeek.MONDAY, int1);
		orario.unisciIntervallo(DayOfWeek.MONDAY, int2);
		orario.unisciIntervallo(DayOfWeek.MONDAY, int3);
		orario.unisciIntervallo(DayOfWeek.TUESDAY, int3);
		orario.unisciIntervallo(DayOfWeek.TUESDAY, int1);
		orario.unisciIntervallo(DayOfWeek.TUESDAY, int2);
		Intervallo int4 = new Intervallo(1430, 1900);
		orario.unisciIntervallo(DayOfWeek.TUESDAY, int4);
		
		System.out.println(orario.toString());
	}
	
}
